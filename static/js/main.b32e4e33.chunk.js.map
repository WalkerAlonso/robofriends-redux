{"version":3,"sources":["constants.js","reducers.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","actions.js","reportWebVitals.js","index.js"],"names":["CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","initialStateSearch","searchField","initialStateRobots","isPending","robots","error","Card","name","email","id","className","alt","src","CardList","map","user","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","this","onRequestRobots","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","Component","connect","state","searchRobots","requestRobots","dispatch","event","text","target","value","payload","fetch","then","response","json","data","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","logger","createLogger","rootReducers","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b32e4e33.chunk.js","sourcesContent":["//SYNCHRONOUS STATES\r\nexport const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\n//ASYNCHRONOUS STATES\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","import {\r\n\t\tCHANGE_SEARCH_FIELD,\r\n\t\tREQUEST_ROBOTS_PENDING,\r\n\t\tREQUEST_ROBOTS_SUCCESS,\r\n\t\tREQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\n\r\n//INITIAL STATES\r\nconst initialStateSearch = {\r\n\tsearchField: ''\r\n}\r\nconst initialStateRobots = {\r\n\tisPending: false,\r\n\trobots: [],\r\n\terror: ''\r\n}\r\n\r\n//SYNCHRONOUS REDUCERS\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n\t//console.log(action.type); //Debug\r\n\tswitch (action.type) {\r\n\t\tcase CHANGE_SEARCH_FIELD: \r\n\t\t\treturn Object.assign({}, state, {searchField: action.payload})\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\n//ASYNCHRONOUS REDUCERS\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n\t//console.log(action.type); //Debug\r\n\tswitch (action.type) {\r\n\t\tcase REQUEST_ROBOTS_PENDING: \r\n\t\t\treturn Object.assign({}, state, {isPending: true})\r\n\t\tcase REQUEST_ROBOTS_SUCCESS: \r\n\t\t\treturn Object.assign({}, state, {robots: action.payload, isPending: false})\r\n\t\tcase REQUEST_ROBOTS_FAILED: \r\n\t\t\treturn Object.assign({}, state, {error: action.payload, isPending: false})\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}","import React from 'react';\r\n\r\nconst Card =  ({ name , email , id }) => {\r\n\t//The row above es exactly like the one below just cleaner code\r\n\t//const { name , email , id } = props;\r\n\treturn (\r\n\t\t<div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img alt='robots' src={`https://robohash.org/test${id}?size=200x200`} />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n} \r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\nconst CardList = ({robots}) => {\r\n\t//Rendering\r\n\treturn(\r\n\t\t<div>\r\n\t   \t\t{\r\n   \t\t\t\t//Iterating throw the array of objects of robots.js\r\n\t\t\t\trobots.map((user,i) => {\r\n\t\t\t\t\treturn <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>\t\t\t\r\n\t\t\t\t})\r\n   \t\t\t}\r\n\t    </div> \r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n\treturn (\r\n\t\t<div className = 'pa2'>\r\n\t\t\t<input \r\n\t\t\t\tclassName='pa3 ba b--green bg-lightest-blue' \r\n\t\t\t\ttype='search' \r\n\t\t\t\tplaceholder='search robots'\r\n\t\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style={{overflowY: 'scroll', border: '5px solid black', height: '800px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from \"react\";\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\n\r\nimport { connect } from 'react-redux'; \r\nimport { setSearchField, requestRobots } from '../actions'\r\n\r\n// parameter state comes from index.js provider store state(rootReducers)\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tsearchField: state.searchRobots.searchField,\r\n\t\trobots: state.requestRobots.robots,\r\n\t\tisPending: state.requestRobots.isPending,\r\n\t\terror: state.requestRobots.error\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n\t\tonRequestRobots: () => dispatch(requestRobots())\r\n\t}\r\n}\r\n\r\nclass App extends Component {\r\n\t//Mounting\r\n\tcomponentDidMount(){\r\n\t\tthis.props.onRequestRobots();\r\n\t}\r\n\r\n\t//Rendering (Mounting , Updating)\r\n\trender(){\r\n\t\tconst { robots, searchField, onSearchChange, isPending } = this.props;\r\n\t\tconst filteredRobots = robots.filter(robot=>{\r\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n\t\t})\r\n\r\n\t\treturn isPending ?\r\n\t\t\t//In case the information to be fetched takes too long\r\n\t\t\t<h1 className='tc'>Loading</h1> :\r\n\t\t\t(\r\n\t\t\t\t<div className='tc'>\r\n\t\t\t\t\t<h1 className='f2'>RoboFriends</h1>\r\n\t\t\t\t\t<SearchBox searchChange={onSearchChange}/>\r\n\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t<CardList robots={filteredRobots} />\r\n\t\t\t\t\t</Scroll>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\r\n\t\tCHANGE_SEARCH_FIELD,\r\n\t\tREQUEST_ROBOTS_PENDING,\r\n\t\tREQUEST_ROBOTS_SUCCESS,\r\n\t\tREQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\n\r\n//SYNCHRONOUS ACTIONS\r\nexport const setSearchField = (text) => ({\r\n\ttype: CHANGE_SEARCH_FIELD, \r\n\tpayload: text\r\n})\r\n\r\n//ASYNCHRONOUS ACTIONS\r\n//HOF\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING })\r\n  fetch('https://jsonplaceholder.typicode.com/users')\r\n  \t.then(response => response.json())\r\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload:  data }))\r\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { requestRobots,searchRobots } from './reducers';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport 'tachyons';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst logger = createLogger();\r\nconst rootReducers = combineReducers({requestRobots, searchRobots});\r\nconst store = createStore(rootReducers, applyMiddleware(thunkMiddleware, logger));\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App/>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n\r\n"],"sourceRoot":""}